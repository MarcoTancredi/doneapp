
<!doctype html>
<html lang="pt-br">
<head>
  <meta charset="utf-8">
  <title>DoneApp — Auth</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:0;padding:24px;background:#0f1220;color:#f5f7ff}
    .wrap{max-width:980px;margin:0 auto}
    .card{background:#14182a;border:1px solid #263055;border-radius:16px;padding:16px;box-shadow:0 6px 20px rgba(0,0,0,.35);margin-bottom:16px}
    input,textarea{border:1px solid #2b365f;background:#0b0f1f;color:#e7ecff;border-radius:12px;padding:10px;width:100%;margin:6px 0}
    textarea{min-height:96px}
    .row{display:flex;gap:12px;flex-wrap:wrap}
    .row > div{flex:1;min-width:200px}
    button{border:0;border-radius:12px;padding:10px 16px;font-weight:600;cursor:pointer;background:#7aa2ff;color:#0b0f1f;margin-right:8px;margin-top:8px}
    .green{background:#22c55e}
    .red{background:#ef4444}
    .blue{background:#7aa2ff}
    pre{white-space:pre-wrap;background:#0b0f1f;border:1px solid #2b365f;border-radius:12px;padding:10px}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>Auth — FastAPI + SQLite + JWT (roles + rate limiting + IP rules + integrações)</h1>

    <div class="card">
      <h3>Sign up</h3>
      <div class="row">
        <div><input id="su_user" placeholder="username"></div>
        <div><input id="su_pass" type="password" placeholder="password"></div>
      </div>
      <button onclick="run(this, signup)">Criar</button>
    </div>

    <div class="card">
      <h3>Login</h3>
      <div class="row">
        <div><input id="li_user" placeholder="username"></div>
        <div><input id="li_pass" type="password" placeholder="password"></div>
      </div>
      <button onclick="run(this, login)">Entrar</button>
      <button onclick="run(this, logout)">Logout</button>
    </div>

    <div class="card">
      <h3>Tokens</h3>
      <button onclick="run(this, refresh)">Refresh access token</button>
    </div>

    <div class="card">
      <h3>Perfil</h3>
      <button onclick="run(this, me)">/api/me</button>
      <button onclick="run(this, usersMe)">/api/users/me</button>
    </div>

    <div class="card">
      <h3>Reset de senha (dev)</h3>
      <div class="row">
        <div><input id="rs_user" placeholder="username para reset"></div>
      </div>
      <button onclick="run(this, resetRequest)">Gerar token de reset</button>
      <div class="row">
        <div><input id="rs_token" placeholder="token de reset"></div>
        <div><input id="rs_new" type="password" placeholder="nova senha"></div>
      </div>
      <button onclick="run(this, resetConfirm)">Confirmar reset</button>
    </div>

    <div class="card">
      <h3>Alterar senha</h3>
      <div class="row">
        <div><input id="cp_curr" type="password" placeholder="senha atual"></div>
        <div><input id="cp_new"  type="password" placeholder="nova senha"></div>
      </div>
      <button onclick="run(this, changePassword)">Change password</button>
    </div>

    <div class="card">
      <h3>Admin</h3>
      <div class="row">
        <div><input id="ad_user" placeholder="username para promover a admin (uma única vez)"></div>
      </div>
      <button onclick="run(this, seedAdmin)">Seed admin (once)</button>
      <button onclick="run(this, adminPing)">Admin ping</button>
    </div>

    <div class="card">
      <h3>Rate limiting (admin)</h3>
      <div class="row">
        <div><input id="rl_login_max"  type="number" min="1" placeholder="login_max"></div>
        <div><input id="rl_login_win"  type="number" min="1" placeholder="login_win (s)"></div>
        <div><input id="rl_signup_max" type="number" min="1" placeholder="signup_max"></div>
        <div><input id="rl_signup_win" type="number" min="1" placeholder="signup_win (s)"></div>
      </div>
      <div class="row">
        <div><input id="rl_reset_max"  type="number" min="1" placeholder="reset_max"></div>
        <div><input id="rl_reset_win"  type="number" min="1" placeholder="reset_win (s)"></div>
        <div><input id="rl_distinct_max" type="number" min="1" placeholder="distinct_max (users/IP)"></div>
        <div><input id="rl_distinct_win" type="number" min="1" placeholder="distinct_win (s)"></div>
      </div>
      <button onclick="run(this, loadRateLimits)">Carregar</button>
      <button onclick="run(this, saveRateLimits)">Salvar</button>
    </div>

    <div class="card">
      <h3>IP rules (admin)</h3>
      <div class="row">
        <div>
          <label>Allowlist (um por linha; suporta wildcard final ex: 10.0.0.*)</label>
          <textarea id="ip_allow"></textarea>
        </div>
        <div>
          <label>Denylist (um por linha; prioridade sobre allow)</label>
          <textarea id="ip_deny"></textarea>
        </div>
      </div>
      <button onclick="run(this, loadIpLists)">Carregar</button>
      <button onclick="run(this, saveIpLists)">Salvar</button>
    </div>

    <div class="card">
      <h3>Integrações — Criar</h3>
      <div class="row">
        <div><input id="ig_provider" placeholder="provider (ex: instagram, facebook)"></div>
        <div><input id="ig_label" placeholder="label da conta (ex: @minhaloja)"></div>
      </div>
      <div class="row">
        <div><input id="ig_token" placeholder="token de acesso / api key"></div>
      </div>
      <button onclick="run(this, igCreate)">Criar integração</button>
    </div>

    <div class="card">
      <h3>Integrações — Gerenciar</h3>
      <button onclick="run(this, igList)">Listar minhas integrações</button>
      <div class="row">
        <div><input id="ig_id" type="number" placeholder="integration id"></div>
      </div>
      <button onclick="run(this, igTest)">Testar</button>
      <button onclick="run(this, igRotate)">Rotacionar token</button>
      <button onclick="run(this, igDelete)">Excluir</button>
    </div>

    <div class="card">
      <h3>Security log (admin)</h3>
      <div class="row">
        <div><input id="tail_lines" type="number" min="1" value="200" placeholder="linhas"></div>
      </div>
      <button onclick="run(this, tailLog)">Tail</button>
      <a id="dl" href="/api/admin/security_log/download" target="_blank"><button>Download</button></a>
      <button onclick="clearLog()">Clear</button>
    </div>

    <div class="card">
      <h3>Log</h3>
      <pre id="log"></pre>
    </div>
  </div>

  <script>
    const log = (v) => document.getElementById('log').textContent =
      (typeof v === 'string' ? v : JSON.stringify(v, null, 2));
    const tokenKey = 'doneapp_token';
    const refreshKey = 'doneapp_refresh';
    function setBtnState(btn, cls){
      try{ btn.classList.remove('green','red','blue'); }catch(_){}
      try{ if(cls) btn.classList.add(cls); }catch(_){}
    }
    function run(btn, fn){
      if(!btn || btn.disabled) return;
      btn.disabled = true;
      setBtnState(btn,'green');
      const finalize = () => {
        setTimeout(() => { setBtnState(btn,'blue'); btn.disabled = false; }, 3000);
      };
      try{
        const r = fn();
        if (r && typeof r.then === 'function'){
          r.then(() => finalize())
           .catch(e => { setBtnState(btn,'red'); showError(e); finalize(); });
        } else {
          finalize();
        }
      }catch(e){
        setBtnState(btn,'red'); showError(e); finalize();
      }
    }


    function authHeaders(){
      const t = localStorage.getItem(tokenKey);
      return t ? {'Authorization':'Bearer '+t} : {};
    }

    async function call(path, opts = {}) {
      const headers = Object.assign({'Content-Type':'application/json'}, authHeaders(), (opts.headers||{}));
      const res = await fetch(path, Object.assign({}, opts, {headers}));
      let data = {};
      try { data = await res.json(); } catch(_) {}
      if (!res.ok) {
        const e = new Error((data && data.detail) || res.statusText);
        e.status = res.status;
        e.retryAfter = res.headers.get('Retry-After');
        throw e;
      }
      return data;
    }

    function showError(e) {
      if (e && e.status === 429) {
        const ra = parseInt(e.retryAfter || '0', 10);
        if (!isNaN(ra) && ra > 0) { log(`Muitas tentativas. Tente novamente em ~${ra}s`); return; }
        log('Muitas tentativas. Aguarde um pouco.');
      } else if (e && e.status === 403) {
        log('IP não permitido');
      } else {
        log(e?.message || 'erro');
      }
    }

    // ---- Auth/Perfil/Reset (iguais aos anteriores) ----
    async function signup() {
      try { log(await call('/api/signup', {method:'POST', body: JSON.stringify({username: su_user.value, password: su_pass.value})})); }
      catch(e){ showError(e); }
    }
    async function login() {
      try {
        const data = await call('/api/login', {method:'POST', body: JSON.stringify({username: li_user.value, password: li_pass.value})});
        localStorage.setItem(tokenKey, data.access_token);
        if (data.refresh_token) localStorage.setItem(refreshKey, data.refresh_token);
        log({login:"ok", role: data.role || "user"});
      } catch(e){ showError(e); }
    }
    function logout(){ localStorage.removeItem(tokenKey); localStorage.removeItem(refreshKey); log({logout:"ok"}); }
    async function refresh() {
      try {
        const rt = localStorage.getItem(refreshKey); if (!rt) { log("no refresh token"); return; }
        const data = await call('/api/token/refresh', {method:'POST', body: JSON.stringify({refresh_token: rt})});
        localStorage.setItem(tokenKey, data.access_token); log({refresh:"ok"});
      } catch(e){ showError(e); }
    }
    async function me() { try { log(await call('/api/me')); } catch(e){ showError(e); } }
    async function usersMe(){ try { log(await call('/api/users/me')); } catch(e){ showError(e); } }
    async function changePassword(){
      try {
        const curr = cp_curr.value, nxt = cp_new.value; if (!curr || !nxt) { log("preencha as senhas"); return; }
        log(await call('/api/change_password', {method:'POST', body: JSON.stringify({current_password: curr, new_password: nxt})}));
      } catch(e){ showError(e); }
    }
    async function resetRequest(){
      try {
        const u = rs_user.value.trim(); if (!u){ log("informe username"); return; }
        const data = await call('/api/reset/request',{method:'POST', body: JSON.stringify({username: u})});
        log(data); if (data.reset_token) rs_token.value = data.reset_token;
      } catch(e){ showError(e); }
    }
    async function resetConfirm(){
      try {
        const token = rs_token.value.trim(), newp = rs_new.value; if (!token || !newp){ log("token/senha ausentes"); return; }
        log(await call('/api/reset/confirm',{method:'POST', body: JSON.stringify({token, new_password: newp})}));
      } catch(e){ showError(e); }
    }
    async function seedAdmin(){ try { const u = ad_user.value.trim() || li_user.value.trim(); if (!u){ log("informe username"); return; } log(await call('/api/setup/admin_once',{method:'POST', body: JSON.stringify({username:u})})); } catch(e){ showError(e); } }
    async function adminPing(){ try { log(await call('/api/admin/ping')); } catch(e){ showError(e); } }

    // ---- Rate limiting ----
    async function loadRateLimits(){
      try {
        const cfg = await call('/api/admin/rate_limits');
        rl_login_max.value=cfg.login_max; rl_login_win.value=cfg.login_win;
        rl_signup_max.value=cfg.signup_max; rl_signup_win.value=cfg.signup_win;
        rl_reset_max.value=cfg.reset_max; rl_reset_win.value=cfg.reset_win;
        rl_distinct_max.value=cfg.distinct_max; rl_distinct_win.value=cfg.distinct_win;
        log({rate_limits: cfg});
      } catch(e){ showError(e); }
    }
    async function saveRateLimits(){
      try {
        const body = {
          login_max:+rl_login_max.value||0, login_win:+rl_login_win.value||0,
          signup_max:+rl_signup_max.value||0, signup_win:+rl_signup_win.value||0,
          reset_max:+rl_reset_max.value||0, reset_win:+rl_reset_win.value||0,
          distinct_max:+rl_distinct_max.value||0, distinct_win:+rl_distinct_win.value||0,
        };
        log(await call('/api/admin/rate_limits',{method:'POST', body:JSON.stringify(body)}));
      } catch(e){ showError(e); }
    }

    // ---- IP rules ----
    async function loadIpLists(){
      try { const cfg = await call('/api/admin/ip_lists'); ip_allow.value=(cfg.allow||[]).join('\n'); ip_deny.value=(cfg.deny||[]).join('\n'); log({ip_lists: cfg}); }
      catch(e){ showError(e); }
    }
    async function saveIpLists(){
      try {
        const allow = ip_allow.value.split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
        const deny  = ip_deny.value.split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
        log(await call('/api/admin/ip_lists',{method:'POST', body:JSON.stringify({allow,deny})}));
      } catch(e){ showError(e); }
    }

    // ---- Security log ----
    async function tailLog(){
      try {
        const n = parseInt(tail_lines.value||'200',10);
        const res = await fetch('/api/admin/security_log?lines='+ (isNaN(n)?200:n), {headers: authHeaders()});
        const txt = await res.text(); if(!res.ok) throw new Error('erro '+res.status); log(txt);
      } catch(e){ showError(e); }
    }
    async function clearLog(){ try { log(await call('/api/admin/security_log/clear',{method:'POST'})); } catch(e){ showError(e); } }

    // ---- Integrações ----
    async function igCreate(){
      try {
        const provider = ig_provider.value.trim(), label = ig_label.value.trim(), token = ig_token.value.trim();
        if (!provider || !label || !token){ log('preencha provider/label/token'); return; }
        log(await call('/api/integrations', {method:'POST', body: JSON.stringify({provider, account_label: label, token})}));
      } catch(e){ showError(e); }
    }
    async function igList(){
      try { log(await call('/api/integrations')); }
      catch(e){ showError(e); }
    }
    async function igTest(){
      try { const id = +ig_id.value; if(!id){ log('informe id'); return; } log(await call(`/api/integrations/${id}/test`, {method:'POST'})); }
      catch(e){ showError(e); }
    }
    async function igRotate(){
      try {
        const id = +ig_id.value; if(!id){ log('informe id'); return; }
        const token = prompt('Novo token:'); if(!token){ log('cancelado'); return; }
        log(await call(`/api/integrations/${id}/rotate`, {method:'POST', body: JSON.stringify({token})}));
      } catch(e){ showError(e); }
    }
    async function igDelete(){
      try { const id = +ig_id.value; if(!id){ log('informe id'); return; } log(await call(`/api/integrations/${id}`, {method:'DELETE'})); }
      catch(e){ showError(e); }
    }
  </script>
</body>
</html>
