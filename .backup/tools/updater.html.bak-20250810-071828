<!doctype html>
<html lang="pt-br">
<head>
  <meta charset="utf-8">
  <title>Atualizador de Arquivos — Protocolo Único (ACR)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:0;padding:24px;background:#0f1220;color:#f5f7ff}
    .card{background:#14182a;border:1px solid #263055;border-radius:16px;padding:16px;box-shadow:0 6px 20px rgba(0,0,0,.35);}
    textarea{width:100%;height:320px;border-radius:12px;border:1px solid #2b365f;background:#0b0f1f;color:#e7ecff;padding:12px;font-family:ui-monospace, Menlo, Consolas, "Liberation Mono", monospace}
    .row{display:flex;gap:12px;flex-wrap:wrap;margin:12px 0}
    input[type=text]{flex:1;min-width:280px;border-radius:12px;border:1px solid #2b365f;background:#0b0f1f;color:#e7ecff;padding:10px}
    .btn{border:0;border-radius:12px;padding:10px 16px;font-weight:600;cursor:pointer;background:#7aa2ff;color:#0b0f1f}
    .btn[disabled]{opacity:.6;cursor:not-allowed}
    .btn.green{background:#54d988;color:#092515}
    .btn.red{background:#ff7a7a;color:#2a0b0b}
    .btn.blue{background:#7aa2ff;color:#0b0f1f}
    .muted{color:#9fb2ff;font-size:12px}
    pre{white-space:pre-wrap;background:#0b0f1f;border:1px solid #2b365f;border-radius:12px;padding:10px}
  </style>
</head>
<body>
  <h1>Atualizador de Arquivos — Protocolo Único (ACR)</h1>
  <div class="card">
    <div class="row">
      <input id="workspace" type="text" value="D:\bin\DoneApp" placeholder="Workspace root (ex.: C:\projetos\play)" />
      <input id="endpoint" type="text" value="http://localhost:5000/apply" placeholder="Endpoint (ex.: http://localhost:5000/apply)" />
    </div>
    <div class="row">
      <input id="gitUser"  type="text" value="MarcoTancredi" placeholder="git user.name (default)" />
      <input id="gitEmail" type="text" value="Marco@PlanetaMicro.com.br" placeholder="git user.email (default)" />
    </div>

    <div class="row">
      <button id="sendBtn"    class="btn blue">Aplicar</button>
      <button id="condaBtn"   class="btn">Conda</button>
      <button id="serverBtn"  class="btn">Server</button>
      <button id="restartBtn" class="btn">Restart</button>
      <button id="commitBtn"  class="btn">Commit</button>
      <button id="clearBtn"   class="btn">Clear</button>
    </div>
    <textarea id="protocol" placeholder="# Cole aqui o protocolo ACR..."></textarea>
    <p class="muted">Âncora é opcional e <strong>sagrada</strong> — jamais alterada. Cut é por <strong>linhas inteiras</strong>.</p>
    <h3>Log</h3>
    <pre id="log"></pre>
  </div>
  <!-- Modal de Commit -->
  <div id="commitModal" style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.6); align-items:center; justify-content:center; z-index:1000;">
    <div style="background:#14182a; border:1px solid #263055; border-radius:16px; padding:16px; width:min(520px,90%); box-shadow:0 6px 20px rgba(0,0,0,.35);">
      <h3 style="margin-top:0">Commit</h3>
      <div class="row">
        <div><input id="cm_name"  placeholder="Nome"></div>
        <div><input id="cm_email" placeholder="E-mail"></div>
      </div>
      <div class="row">
        <div style="flex:1"><input id="cm_msg" placeholder="Descrição do commit"></div>
      </div>
      <div style="text-align:right">
        <button id="cm_cancel" class="btn">Cancelar</button>
        <button id="cm_ok" class="btn blue">OK</button>
      </div>
    </div>
  </div>


  <script>
    const $ = (id) => document.getElementById(id);

    function setBtnState(btn, cls) {
      btn.classList.remove('green','red','blue');
      if (cls) btn.classList.add(cls);
    }

    function cooldown(btn, finalClass) {
      btn.disabled = true;
      setTimeout(() => {
        btn.disabled = false;
        if (finalClass) setBtnState(btn, finalClass);
      }, 3000);
    }

    async function copyToClipboard(text) {
      try { await navigator.clipboard.writeText(text); } catch(e){}
    }

    function baseUrl() {
      return $('endpoint').value.trim().replace(/\/?apply$/,'');
    }

    async function apply() {
      const btn = $('sendBtn');
      cooldown(btn); setBtnState(btn, 'green'); // verde ao clicar
      const endpoint = $('endpoint').value.trim();
      const workspace = $('workspace').value.trim();
      const payload = { workspace_root: workspace, protocol_text: $('protocol').value };
      try {
        const res = await fetch(endpoint, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
        const data = await res.json();
        const output = data.output || JSON.stringify(data, null, 2);
        $('log').textContent = output;
        copyToClipboard(output);
        if (/\[ERRO\]/.test(output) || /Erro:/i.test(output)) setBtnState(btn, 'red'); else setBtnState(btn, 'blue');
      } catch (e) {
        $('log').textContent = "Erro: " + e.message;
        setBtnState(btn, 'red');
      }
    }

    async function pingStatus() {
      try {
        const res = await fetch(baseUrl() + '/status');
        if (!res.ok) return null;
        return await res.json();
      } catch(e){ return null; }
    }

    async function checkConda() {
      const btn = $('condaBtn'); cooldown(btn);
      const st = await pingStatus();
      if (st && st.conda_ok) { setBtnState(btn, 'green'); $('log').textContent = 'Conda: ON (PATH)'; }
      else { setBtnState(btn, 'red'); $('log').textContent = 'Conda: OFF (ativação real é no shell)'; }
    }

    async function checkServer() {
      const btn = $('serverBtn'); cooldown(btn);
      const st = await pingStatus();
      if (st && st.server === 'on') { setBtnState(btn, 'green'); $('log').textContent = 'Server: ON'; }
      else { setBtnState(btn, 'red'); $('log').textContent = 'Server: OFF'; }
    }

    async function doRestart() {
      const btn = $('restartBtn');
      // fica verde ao clicar e volta para AZUL após 3s
      setBtnState(btn, 'green');
      cooldown(btn, 'blue');
      try {
        const res = await fetch(baseUrl() + '/restart', { method:'POST' });
        if (res && res.ok) {
          $('log').textContent = 'Restart solicitado (o runner relança o servidor).';
        } else {
          $('log').textContent = 'Restart solicitado.';
        }
      } catch(e) {
        // se o processo cair antes da resposta, registramos a nota sem mudar a cor final
        $('log').textContent = 'Restart solicitado (conexão foi fechada durante o reinício).';
      }
    }

    async function doCommit() {
    async function doCommit() {
      const btn = $('commitBtn'); cooldown(btn);
      const workspace = $('workspace').value.trim();
      // defaults dos inputs
      let name  = $('gitUser').value.trim()  || 'MarcoTancredi';
      let email = $('gitEmail').value.trim() || 'Marco@PlanetaMicro.com.br';

      // helper local: UM único prompt "Nome <email>" ou "Nome;email"
      function promptGitIdentity(defaultName, defaultEmail) {
        const pre = `${defaultName} <${defaultEmail}>`;
        const ans = window.prompt(
          "Informe Nome e E-mail (ex: Nome <email> ou Nome;email):",
          pre
        );
        if (ans === null) return null;
        const s = ans.trim();
        let nm = defaultName, em = defaultEmail;
        const m = s.match(/^(.+?)\s*<([^>]+)>$/);
        if (m) { nm = m[1].trim(); em = m[2].trim(); }
        else {
          const parts = s.split(/[,;|]/);
          if (parts.length >= 2) { nm = parts[0].trim(); em = parts[1].trim(); }
          else if (s.includes('@')) { em = s; }
          else { nm = s; }
        }
        if (!nm || !em) return null;
        return { name: nm, email: em };
      }

      // só pede Nome/E-mail se ainda não tiver git init
      const st = await pingStatus();
      if (!st || !st.git_inited) {
        const id = promptGitIdentity(name, email);
        if (!id) { $('log').textContent = 'git init cancelado'; setBtnState(btn,'red'); return; }
        name = id.name; email = id.email;
        // grava nos inputs para persistir os defaults
        $('gitUser').value = name;
        $('gitEmail').value = email;

        try {
          const r = await fetch(baseUrl() + '/git/init', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name, email})
          });
          const data = await r.json();
          if (!data.ok) { $('log').textContent = 'git init ERRO: ' + (data.error||''); setBtnState(btn,'red'); return; }
        } catch(e){ $('log').textContent='git init ERRO: '+e.message; setBtnState(btn,'red'); return; }
      }

      // garante remoto (ainda pergunta a URL se faltar)
      try {
        const r0 = await fetch(baseUrl() + '/git/remotes?workspace_root=' + encodeURIComponent(workspace));
        const j0 = await r0.json();
        const hasRemote = j0.ok && /origin\s+/i.test(j0.output || "");
        if (!hasRemote) {
          const url = prompt("URL do repositório remoto (ex: https://github.com/MarcoTancredi/doneapp.git):");
          if (!url) { $('log').textContent = 'remote não configurado'; setBtnState(btn,'red'); return; }
          const rr = await fetch(baseUrl() + '/git/remote', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name:'origin', url})
          });
          const jd = await rr.json();
          if (!jd.ok) { $('log').textContent = 'git remote ERRO: ' + (jd.error||''); setBtnState(btn,'red'); return; }
        }
      } catch(e){ $('log').textContent = 'git remote ERRO: ' + e.message; setBtnState(btn,'red'); return; }

      const msg = prompt('Commit message:', 'update');
      if (!msg) { $('log').textContent = 'commit cancelado'; return; }

      try {
        const r = await fetch(baseUrl() + '/git/commit', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({workspace_root: workspace, message: msg, push: true})
        });
        const data = await r.json();
        if (!data.ok) { $('log').textContent = 'commit/push ERRO: ' + (data.error || ''); setBtnState(btn,'red'); }
        else { $('log').textContent = data.output || 'commit+push ok'; setBtnState(btn,'blue'); copyToClipboard(data.output||''); }
      } catch(e) {
        $('log').textContent = 'commit/push ERRO: ' + e.message; setBtnState(btn,'red');
      }
    }

      const btn = $('commitBtn'); cooldown(btn);
      const workspace = $('workspace').value.trim();

      // garante repo inicializado
      const st = await pingStatus();
      if (!st || !st.git_inited) {
        const name = prompt("git user.name:");
        const email = prompt("git user.email:");
        if (!name || !email) { $('log').textContent = 'git init cancelado'; return; }
        try {
          const r = await fetch(baseUrl() + '/git/init', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name, email})
          });
          const data = await r.json();
          if (!data.ok) { $('log').textContent = 'git init ERRO: ' + (data.error||''); setBtnState(btn,'red'); return; }
        } catch(e){ $('log').textContent='git init ERRO: '+e.message; setBtnState(btn,'red'); return; }
      }

      // garante remoto
      try {
        const r0 = await fetch(baseUrl() + '/git/remotes?workspace_root=' + encodeURIComponent(workspace));
        const j0 = await r0.json();
        const hasRemote = j0.ok && /origin\s+/i.test(j0.output || "");
        if (!hasRemote) {
          const url = prompt("URL do repositório remoto (ex: https://github.com/MarcoTancredi/doneapp.git):");
          if (!url) { $('log').textContent = 'remote não configurado'; setBtnState(btn,'red'); return; }
          const rr = await fetch(baseUrl() + '/git/remote', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name:'origin', url})
          });
          const jd = await rr.json();
          if (!jd.ok) { $('log').textContent = 'git remote ERRO: ' + (jd.error||''); setBtnState(btn,'red'); return; }
        }
      } catch(e){ $('log').textContent = 'git remote ERRO: ' + e.message; setBtnState(btn,'red'); return; }

      const msg = prompt('Commit message:', 'update');
      if (!msg) { $('log').textContent = 'commit cancelado'; return; }

      try {
        const r = await fetch(baseUrl() + '/git/commit', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({workspace_root: workspace, message: msg, push: true})
        });
        const data = await r.json();
        if (!data.ok) { $('log').textContent = 'commit/push ERRO: ' + (data.error || ''); setBtnState(btn,'red'); }
        else { $('log').textContent = data.output || 'commit+push ok'; setBtnState(btn,'blue'); copyToClipboard(data.output||''); }
      } catch(e) {
        $('log').textContent = 'commit/push ERRO: ' + e.message; setBtnState(btn,'red');
      }
    }

    function clearAll() {
      const btn = $('clearBtn');
      cooldown(btn);
      $('protocol').value = '';
      $('log').textContent = '';
      // todos os botões voltam à cor padrão (azul)
      ['sendBtn','condaBtn','serverBtn','restartBtn','commitBtn','clearBtn'].forEach(id => {
        const el = $(id);
        if (el) setBtnState(el, 'blue');
      });
    }

    $('sendBtn').addEventListener('click', apply);
    // ---- Modal de Commit ----
    function openCommitModal() {
      $('cm_name').value  = ($('gitUser')?.value.trim()  || 'MarcoTancredi');
      $('cm_email').value = ($('gitEmail')?.value.trim() || 'Marco@PlanetaMicro.com.br');
      $('cm_msg').value   = 'update';
      const m = $('commitModal'); if (m) { m.style.display = 'flex'; }
    }
    function closeCommitModal(){ const m = $('commitModal'); if (m) { m.style.display = 'none'; } }
    function startCommit(){
      const btn = $('commitBtn'); cooldown(btn);
      openCommitModal();
    }
    async function performCommit(name, email, message){
      const btn = $('commitBtn');
      const workspace = $('workspace').value.trim();
      try{
        // init (se necessário)
        const st = await pingStatus();
        if (!st || !st.git_inited){
          const r = await fetch(baseUrl() + '/git/init', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name, email})
          });
          const data = await r.json();
          if (!data.ok){ $('log').textContent = 'git init ERRO: ' + (data.error||''); setBtnState(btn,'red'); return; }
          // persiste defaults
          if ($('gitUser'))  $('gitUser').value  = name;
          if ($('gitEmail')) $('gitEmail').value = email;
        }

        // remoto
        const r0 = await fetch(baseUrl() + '/git/remotes?workspace_root=' + encodeURIComponent(workspace));
        const j0 = await r0.json();
        const hasRemote = j0.ok && /origin\s+/i.test(j0.output || "");
        if (!hasRemote){
          const url = window.prompt("URL do repositório remoto (ex: https://github.com/MarcoTancredi/doneapp.git):", "");
          if (!url){ $('log').textContent = 'remote não configurado'; setBtnState(btn,'red'); return; }
          const rr = await fetch(baseUrl() + '/git/remote', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({workspace_root: workspace, name:'origin', url})
          });
          const jd = await rr.json();
          if (!jd.ok){ $('log').textContent = 'git remote ERRO: ' + (jd.error||''); setBtnState(btn,'red'); return; }
        }

        // commit + push
        const r = await fetch(baseUrl() + '/git/commit', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({workspace_root: workspace, message, push: true})
        });
        const data = await r.json();
        if (!data.ok){ $('log').textContent = 'commit/push ERRO: ' + (data.error || ''); setBtnState(btn,'red'); }
        else { $('log').textContent = data.output || 'commit+push ok'; setBtnState(btn,'blue'); copyToClipboard(data.output||''); }
      } catch(e){
        $('log').textContent = 'commit/push ERRO: ' + e.message; setBtnState(btn,'red');
      }
    }

    // liga botoes do modal
    (function(){
      const cancelBtn = $('cm_cancel');
      const okBtn = $('cm_ok');
      if (cancelBtn) cancelBtn.addEventListener('click', ()=>{ closeCommitModal(); });
      if (okBtn) okBtn.addEventListener('click', async ()=>{
        const name = $('cm_name').value.trim();
        const email = $('cm_email').value.trim();
        const msg = $('cm_msg').value.trim() || 'update';
        closeCommitModal();
        await performCommit(name, email, msg);
      });
    })();

    $('sendBtn').addEventListener('click', apply);

    $('condaBtn').addEventListener('click', checkConda);
    $('serverBtn').addEventListener('click', checkServer);
    $('restartBtn').addEventListener('click', doRestart);
    $('commitBtn').addEventListener('click', doCommit);
    $('clearBtn').addEventListener('click', clearAll);
  </script>
</body>
</html>
